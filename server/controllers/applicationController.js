const Application = require('../models/Application');
const axios = require('axios');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
exports.createApplication = async (req, res) => {
    try {
        const { recaptchaToken, ...formData } = req.body;

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
        const recaptchaResponse = await axios.post(
            'https://www.google.com/recaptcha/api/siteverify',
            null,
            {
                params: {
                    secret: process.env.RECAPTCHA_SECRET_KEY,
                    response: recaptchaToken
                }
            }
        );

        if (!recaptchaResponse.data.success) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.'
            });
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!formData.lastName || !formData.firstName || !formData.email || !formData.phone) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–∞–º–∏–ª–∏—è, –ò–º—è, Email –∏ –¢–µ–ª–µ—Ñ–æ–Ω.'
            });
        }

        // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(formData.email)) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.'
            });
        }

        // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const cleanedPhone = formData.phone.replace(/[^+\d]/g, '');
        if (cleanedPhone.length !== 12 || !cleanedPhone.startsWith('+7')) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.'
            });
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏
        const existingApp = await Application.findOne({
            $or: [
                { phone: cleanedPhone },
                { email: formData.email }
            ]
        });

        if (existingApp) {
            return res.status(400).json({
                success: false,
                message: '–ó–∞—è–≤–∫–∞ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
            });
        }

        // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        const newApplication = new Application({
            lastName: formData.lastName,
            firstName: formData.firstName,
            middleName: formData.middleName || '',
            email: formData.email,
            phone: cleanedPhone,
            startTime: formData.startTime || '',
            endTime: formData.endTime || '',
            classNumber: formData.classNumber || '',
            purpose: formData.purpose || '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏',
            additionalInfo: formData.additionalInfo || '',
            status: '–ù–æ–≤–∞—è'
        });

        await newApplication.save();

        // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        try {
            const message = `
            üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${newApplication._id}
            üë§ –§–ò–û: ${formData.lastName} ${formData.firstName} ${formData.middleName || ''}
            üìß Email: ${formData.email}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanedPhone}
            üéØ –¶–µ–ª—å: ${formData.purpose || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            üïí –í—Ä–µ–º—è: ${formData.startTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - ${formData.endTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            üìù –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${formData.additionalInfo || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            `;

            await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: process.env.TELEGRAM_CHAT_ID,
                text: message
            });
        } catch (telegramError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }

        // 8. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.status(201).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
            data: {
                id: newApplication._id,
                status: newApplication.status,
                createdAt: newApplication.createdAt
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
exports.getApplications = async (req, res) => {
    try {
        const { status, page = 1, limit = 10 } = req.query;
        const query = {};

        if (status) {
            query.status = status;
        }

        const applications = await Application.find(query)
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(parseInt(limit));

        const total = await Application.countDocuments(query);

        res.status(200).json({
            success: true,
            data: applications,
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total,
                pages: Math.ceil(total / limit)
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.'
        });
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
exports.updateApplicationStatus = async (req, res) => {
    try {
        const { id, status } = req.body;

        if (!id || !status) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.'
            });
        }

        const validStatuses = ['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.'
            });
        }

        const updatedApplication = await Application.findByIdAndUpdate(
            id,
            { status },
            { new: true, runValidators: true }
        );

        if (!updatedApplication) {
            return res.status(404).json({
                success: false,
                message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
            });
        }

        res.status(200).json({
            success: true,
            data: updatedApplication
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.'
        });
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ
exports.updateApplicationComment = async (req, res) => {
    try {
        const { id, comment } = req.body;

        if (!id) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏.'
            });
        }

        const updatedApplication = await Application.findByIdAndUpdate(
            id,
            { comment },
            { new: true, runValidators: true }
        );

        if (!updatedApplication) {
            return res.status(404).json({
                success: false,
                message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
            });
        }

        res.status(200).json({
            success: true,
            data: updatedApplication
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞—è–≤–∫–∏.'
        });
    }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
exports.deleteApplication = async (req, res) => {
    try {
        const { id } = req.body;

        if (!id) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞—è–≤–∫–∏'
            });
        }

        const deletedApplication = await Application.findByIdAndDelete(id);

        if (!deletedApplication) {
            return res.status(404).json({
                success: false,
                message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        res.status(200).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
            data: deletedApplication
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'
        });
    }
};
